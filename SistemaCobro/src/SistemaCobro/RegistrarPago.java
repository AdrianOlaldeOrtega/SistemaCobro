/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SistemaCobro;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author LEVEN
 */
public class RegistrarPago extends javax.swing.JFrame {

    ConexionSQL conexion = new ConexionSQL();
    PreparedStatement st;
    ResultSet rs;
    Statement stt;
    Connection conn;

    /**
     * Creates new form NewJFrame
     */
    public RegistrarPago() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Monto_Pago = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        Nombre_Alumno = new javax.swing.JTextField();
        Fecha_Pago = new com.toedter.calendar.JDateChooser();
        Concepto_Pago = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Fecha:");

        jLabel2.setText("Monto:");

        jLabel3.setText("Concepto:");

        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel4.setText("No. Control Alumno");

        Fecha_Pago.setDateFormatString("yyyy-MM-dd");

        Concepto_Pago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Libro", "Insripcion", "Mensualidad", "Certificacion", "Sin Especificar" }));
        Concepto_Pago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Concepto_PagoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Nombre_Alumno)
                    .addComponent(Monto_Pago)
                    .addComponent(Fecha_Pago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancelar)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(Concepto_Pago, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(Fecha_Pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Nombre_Alumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Monto_Pago, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Concepto_Pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnCancelar))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void Concepto_PagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Concepto_PagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Concepto_PagoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Date f = Fecha_Pago.getDate();
        if (f != null) {
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String x = df.format(f);
            if (!Nombre_Alumno.getText().isEmpty() && !Monto_Pago.getText().isEmpty()) {
                try {
                    conn = ConexionSQL.conectar();
                    String sentencia = "Insert into PAGO (FechaP,Monto,ALUMNO_NumeroControl,Concepto) values (?,?,?,?)";
                    st = conn.prepareStatement(sentencia);
                    st.setString(1, x);
                    st.setDouble(2, Double.valueOf(Monto_Pago.getText()));
                    st.setInt(3, Integer.parseInt(Nombre_Alumno.getText()));
                    st.setString(4, Concepto_Pago.getSelectedItem().toString());

                    int res = st.executeUpdate();
                    if (res > 0) {
                        JOptionPane.showMessageDialog(null, "Se ha registrado con Ã©xito");

                    } else {
                        JOptionPane.showMessageDialog(null, "Ups! Algo salio mal");
                    }
                    st.close();
                    ReducirDeuda();
                } catch (Exception e) {
                    System.out.println(e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Revise que todos los campos esten llenos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Revise que todos los campos esten llenos");
        }
        this.dispose();


    }//GEN-LAST:event_jButton1ActionPerformed

    public void ReducirDeuda() {
        try {
            //hacemos la consulta para ver si dicho alumno tiene alguna deuda
            conn = ConexionSQL.conectar();
            String query = "SELECT Libro,Inscripcion,Mensualidad,Certificacion,Saldo FROM deuda WHERE ALUMNO_NumeroControl = " + Nombre_Alumno.getText();
            stt = conn.createStatement();
            rs = stt.executeQuery(query);
            //Comprobamos si nos arrojo un resultado
            if (rs.next()) {
                //En caso de que no se especifique un motivo
                //probado
                if (Concepto_Pago.getSelectedItem().toString().equals("Sin Especificar")) {
                    Double monto = Double.valueOf(Monto_Pago.getText());
                    Double Libro, Inscripcion, Mensualidad, Certificacion, Saldo;
                    Libro = rs.getDouble(1);
                    Inscripcion = rs.getDouble(2);
                    Mensualidad = rs.getDouble(3);
                    Certificacion = rs.getDouble(4);
                    Saldo = rs.getDouble(5);
                    Double temp = 0.0;
                    if (monto > 0.0) {
                        temp = monto - Libro;
                        if (temp > 0.0) {
                            Libro = 0.0;
                            monto = temp;
                            temp = monto - Inscripcion;
                            if (temp > 0.0) {
                                Inscripcion = 0.0;
                                monto = temp;
                                temp = monto - Mensualidad;
                                if (temp > 0.0) {
                                    Mensualidad = 0.0;
                                    monto = temp;
                                    temp = monto - Certificacion;
                                    if (temp > 0.0) {
                                        Certificacion = 0.0;
                                        monto = temp;
                                        Saldo = Saldo + monto;
                                    } else {
                                        Certificacion = Certificacion - monto;
                                        monto = 0.0;
                                    }
                                } else {
                                    Mensualidad = Mensualidad - monto;
                                    monto = 0.0;
                                }
                            } else {
                                Inscripcion = Inscripcion - monto;
                                monto = 0.0;
                            }
                        } else {
                            Libro = Libro - monto;
                            monto = 0.0;
                        }
                        query = "Update DEUDA SET Libro = " + Libro
                                + ", Inscripcion = " + Inscripcion
                                + ", Mensualidad = " + Mensualidad
                                + ", Certificacion = " + Certificacion
                                + ", Saldo = " + Saldo + " WHERE ALUMNO_NumeroControl =" + Nombre_Alumno.getText();
                        stt.executeUpdate(query);
                    } else {
                        JOptionPane.showMessageDialog(null, "Debe ingresar una cantidad mayor a 0");
                    }
                    //probado
                } else {
                    //Cuando se especifica un motivo
                    String concepto = String.valueOf(Concepto_Pago.getSelectedItem());
                    Double monto = Double.valueOf(Monto_Pago.getText());
                    Double deuda = 0.0;
                    String concepto_sent = "";
                    switch (concepto) {
                        //restamos la deuda que se tenga en este rubro y se le resta el monto pagado
                        case "Libro":
                            deuda = rs.getDouble(1);
                            deuda = deuda - monto;
                            concepto_sent = "Libro";
                            break;
                        case "Insripcion":
                            deuda = rs.getDouble(2);
                            deuda = deuda - monto;
                            concepto_sent = "Inscripcion";
                            break;
                        case "Mensualidad":
                            deuda = rs.getDouble(3);
                            deuda = deuda - monto;
                            concepto_sent = "Mensualidad";
                            break;
                        case "Certificacion":
                            deuda = rs.getDouble(4);
                            deuda = deuda - monto;
                            concepto_sent = "Certificacion";
                            break;
                    }
                    //probado
                    if (deuda < 0) {
                        query = "UPDATE DEUDA SET " + concepto_sent + " = 0, Saldo = " + (deuda * (-1))+ " WHERE ALUMNO_NumeroControl = " + Nombre_Alumno.getText();
                        stt.executeUpdate(query);
                    } else {
                        query = "UPDATE DEUDA SET " + concepto_sent + " = " + deuda + " WHERE ALUMNO_NumeroControl = " + Nombre_Alumno.getText();
                        stt.executeUpdate(query);
                    }
                }
                //probado
            } else {
                //Si el alumno no tiene aun una deuda, se le asigna al valor Saldo, que es el saldo a favor que tiene
                query = "Insert into deuda (ALUMNO_NumeroControl,Libro,Inscripcion,Mensualidad,Certificacion,Saldo) values (?,?,?,?,?,?)";
                st = conn.prepareStatement(query);
                st.setInt(1, Integer.parseInt(Nombre_Alumno.getText()));
                st.setDouble(2, 0.0);
                st.setDouble(3, 0.0);
                st.setDouble(4, 0.0);
                st.setDouble(5, 0.0);
                st.setDouble(6, Double.valueOf(Monto_Pago.getText()));
                st.executeUpdate();
            }
            st.close();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Concepto_Pago;
    private com.toedter.calendar.JDateChooser Fecha_Pago;
    private javax.swing.JTextField Monto_Pago;
    private javax.swing.JTextField Nombre_Alumno;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
